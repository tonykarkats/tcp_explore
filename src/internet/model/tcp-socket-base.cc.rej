--- src/internet/model/tcp-socket-base.cc
+++ src/internet/model/tcp-socket-base.cc
@@ -163,6 +167,10 @@
                      "TCP Congestion machine state",
                      MakeTraceSourceAccessor (&TcpSocketBase::m_congStateTrace),
                      "ns3::TcpSocketState::TcpCongStatesTracedValueCallback")
+    .AddTraceSource ("EcnState",
+                     "Current ECN State of TCP Socket",
+                     MakeTraceSourceAccessor (&TcpSocketBase::m_ecnStateTrace),
+                     "ns3::TcpSocketState::EcnStatesTracedValueCallback")
     .AddTraceSource ("AdvWND",
                      "Advertised Window Size",
                      MakeTraceSourceAccessor (&TcpSocketBase::m_advWnd),
@@ -1758,6 +1864,17 @@
 
   SequenceNumber32 ackNumber = tcpHeader.GetAckNumber ();
 
+  if (ackNumber > m_txBuffer->HeadSequence () && (m_tcb->m_ecnState != TcpSocketState::ECN_DISABLED) && (tcpHeader.GetFlags () & TcpHeader::ECE))
+        {
+          if (m_ecnEchoSeq < tcpHeader.GetAckNumber ())
+            {
+              NS_LOG_INFO ("Received ECN Echo is valid");
+              m_ecnEchoSeq = tcpHeader.GetAckNumber ();
+              m_tcb->m_ecnState = TcpSocketState::ECN_ECE_RCVD;
+              NS_LOG_DEBUG (TcpSocketState::EcnStateName[m_tcb->m_ecnState] << " -> ECN_ECE_RCVD");
+            }
+        }
+
   // RFC 6675 Section 5: 2nd, 3rd paragraph and point (A), (B) implementation
   // are inside the function ProcessAck
   ProcessAck (ackNumber, scoreboardUpdated);
